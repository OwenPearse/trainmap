{"ast":null,"code":"var _jsxFileName = \"/Users/owenpearse/Documents/TrainMap/trainmap/frontend/src/components/TransitLayer.js\";\n// frontend/src/components/TransitLayer.js\nimport React from 'react';\nimport { Marker, Popup, Polyline } from 'react-leaflet';\nimport L from 'leaflet';\n\n// Define a custom icon for stops (or use different icons per type if desired)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst defaultStopIcon = L.icon({\n  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',\n  iconSize: [25, 41],\n  iconAnchor: [12, 41]\n});\n\n// Style for route lines (blue, similar to Apple Maps metro lines)\nconst routeStyle = {\n  color: 'blue',\n  weight: 4,\n  opacity: 0.7\n};\nconst TransitLayer = ({\n  routesData,\n  stopsData,\n  selectedTypes\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [routesData && routesData.routes && routesData.routes.map(route => {\n      // Assume route.shape is an array of [latitude, longitude] pairs.\n      // If no shape data is provided, you may need to fetch it separately.\n      return /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: route.shape || [],\n        pathOptions: routeStyle\n      }, route.route_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this);\n    }), stopsData && stopsData.stops && stopsData.stops.map(stop => /*#__PURE__*/_jsxDEV(Marker, {\n      position: [stop.latitude, stop.longitude],\n      icon: defaultStopIcon,\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: stop.stop_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this), \"ID: \", stop.stop_id, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => alert('Load departure times here!'),\n            children: \"Show Departures\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)\n    }, stop.stop_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n};\n_c = TransitLayer;\nexport default TransitLayer;\nvar _c;\n$RefreshReg$(_c, \"TransitLayer\");","map":{"version":3,"names":["React","Marker","Popup","Polyline","L","jsxDEV","_jsxDEV","Fragment","_Fragment","defaultStopIcon","icon","iconUrl","iconSize","iconAnchor","routeStyle","color","weight","opacity","TransitLayer","routesData","stopsData","selectedTypes","children","routes","map","route","positions","shape","pathOptions","route_id","fileName","_jsxFileName","lineNumber","columnNumber","stops","stop","position","latitude","longitude","stop_name","stop_id","onClick","alert","_c","$RefreshReg$"],"sources":["/Users/owenpearse/Documents/TrainMap/trainmap/frontend/src/components/TransitLayer.js"],"sourcesContent":["// frontend/src/components/TransitLayer.js\nimport React from 'react';\nimport { Marker, Popup, Polyline } from 'react-leaflet';\nimport L from 'leaflet';\n\n// Define a custom icon for stops (or use different icons per type if desired)\nconst defaultStopIcon = L.icon({\n  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',\n  iconSize: [25, 41],\n  iconAnchor: [12, 41]\n});\n\n// Style for route lines (blue, similar to Apple Maps metro lines)\nconst routeStyle = {\n  color: 'blue',\n  weight: 4,\n  opacity: 0.7\n};\n\nconst TransitLayer = ({ routesData, stopsData, selectedTypes }) => {\n  return (\n    <>\n      {/* Render Routes as Polylines */}\n      {routesData && routesData.routes && routesData.routes.map((route) => {\n        // Assume route.shape is an array of [latitude, longitude] pairs.\n        // If no shape data is provided, you may need to fetch it separately.\n        return (\n          <Polyline\n            key={route.route_id}\n            positions={route.shape || []}\n            pathOptions={routeStyle}\n          />\n        );\n      })}\n      \n      {/* Render Stops as Clickable Markers */}\n      {stopsData && stopsData.stops && stopsData.stops.map((stop) => (\n        <Marker \n          key={stop.stop_id} \n          position={[stop.latitude, stop.longitude]} \n          icon={defaultStopIcon}\n        >\n          <Popup>\n            <div>\n              <strong>{stop.stop_name}</strong>\n              <br />\n              ID: {stop.stop_id}\n              <br />\n              {/* In the future, attach an event handler to fetch and display departure times */}\n              <button onClick={() => alert('Load departure times here!')}>\n                Show Departures\n              </button>\n            </div>\n          </Popup>\n        </Marker>\n      ))}\n    </>\n  );\n};\n\nexport default TransitLayer;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AACvD,OAAOC,CAAC,MAAM,SAAS;;AAEvB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,eAAe,GAAGL,CAAC,CAACM,IAAI,CAAC;EAC7BC,OAAO,EAAE,6DAA6D;EACtEC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;EAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE;AACrB,CAAC,CAAC;;AAEF;AACA,MAAMC,UAAU,GAAG;EACjBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE,CAAC;EACTC,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,YAAY,GAAGA,CAAC;EAAEC,UAAU;EAAEC,SAAS;EAAEC;AAAc,CAAC,KAAK;EACjE,oBACEf,OAAA,CAAAE,SAAA;IAAAc,QAAA,GAEGH,UAAU,IAAIA,UAAU,CAACI,MAAM,IAAIJ,UAAU,CAACI,MAAM,CAACC,GAAG,CAAEC,KAAK,IAAK;MACnE;MACA;MACA,oBACEnB,OAAA,CAACH,QAAQ;QAEPuB,SAAS,EAAED,KAAK,CAACE,KAAK,IAAI,EAAG;QAC7BC,WAAW,EAAEd;MAAW,GAFnBW,KAAK,CAACI,QAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGpB,CAAC;IAEN,CAAC,CAAC,EAGDb,SAAS,IAAIA,SAAS,CAACc,KAAK,IAAId,SAAS,CAACc,KAAK,CAACV,GAAG,CAAEW,IAAI,iBACxD7B,OAAA,CAACL,MAAM;MAELmC,QAAQ,EAAE,CAACD,IAAI,CAACE,QAAQ,EAAEF,IAAI,CAACG,SAAS,CAAE;MAC1C5B,IAAI,EAAED,eAAgB;MAAAa,QAAA,eAEtBhB,OAAA,CAACJ,KAAK;QAAAoB,QAAA,eACJhB,OAAA;UAAAgB,QAAA,gBACEhB,OAAA;YAAAgB,QAAA,EAASa,IAAI,CAACI;UAAS;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,eACjC3B,OAAA;YAAAwB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,QACF,EAACE,IAAI,CAACK,OAAO,eACjBlC,OAAA;YAAAwB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAEN3B,OAAA;YAAQmC,OAAO,EAAEA,CAAA,KAAMC,KAAK,CAAC,4BAA4B,CAAE;YAAApB,QAAA,EAAC;UAE5D;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC,GAfHE,IAAI,CAACK,OAAO;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAgBX,CACT,CAAC;EAAA,eACF,CAAC;AAEP,CAAC;AAACU,EAAA,GAvCIzB,YAAY;AAyClB,eAAeA,YAAY;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}